---
// Import sub-components (Single Responsibility Principle)
import HeroContent from './hero/HeroContent.astro';

// Simplified interface without complex types
interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  backgroundImage?: string;
  className?: string;
  ctaButtons?: Array<{
    text: string;
    href: string;
    variant?: 'primary' | 'secondary' | 'outline';
    icon?: string;
  }>;
  height?: string;
  textAlign?: 'left' | 'center' | 'right';
}

// Default configuration (simplified)
const defaultConfig = {
  responsive: {
    breakpoints: {
      mobile: 768,
      tablet: 1024,
      desktop: 1200
    }
  },
  animation: {
    enabled: true,
    duration: 800,
    delay: 200,
    easing: 'ease-out'
  },
  accessibility: {
    enableReducedMotion: true,
    ariaLabels: {
      hero: 'Hero section',
      background: 'Hero background image'
    }
  }
};

const defaultTheme = {
  colors: {
    primary: '#2563eb',
    secondary: '#1d4ed8',
    text: '#ffffff',
    textLight: 'rgba(255, 255, 255, 0.95)',
    overlay: 'linear-gradient(135deg, rgba(37, 99, 235, 0.85), rgba(59, 130, 246, 0.75))',
    accent: '#3b82f6'
  },
  typography: {
    titleSize: {
      mobile: '2.5rem',
      tablet: '3.5rem',
      desktop: '4rem'
    },
    subtitleSize: {
      mobile: '1rem',
      tablet: '1.125rem',
      desktop: '1.25rem'
    },
    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
    fontWeight: {
      title: '700',
      subtitle: '500',
      description: '400'
    }
  },
  spacing: {
    padding: {
      mobile: '2rem 1rem',
      tablet: '3rem 2rem',
      desktop: '4rem 3rem'
    },
    margin: {
      mobile: '0',
      tablet: '0',
      desktop: '0'
    }
  },
  effects: {
    borderRadius: '0',
    boxShadow: 'none',
    transition: '0.3s ease'
  }
};

const {
  title,
  subtitle,
  description,
  backgroundImage,
  className = "",
  ctaButtons = [],
  height = "100vh",
  textAlign = 'center'
} = Astro.props;

const finalConfig = defaultConfig;
const finalTheme = defaultTheme;
---

<section
  class={`hero ${className}`}
  data-hero
  aria-label={finalConfig.accessibility.ariaLabels.hero}
  style={`
    --hero-height: ${height};
    --hero-primary-color: ${finalTheme.colors.primary};
    --hero-secondary-color: ${finalTheme.colors.secondary};
    --hero-text-color: ${finalTheme.colors.text};
    --hero-text-light-color: ${finalTheme.colors.textLight};
    --hero-overlay-color: ${finalTheme.colors.overlay};
    --hero-accent-color: ${finalTheme.colors.accent};
    --hero-title-size-mobile: ${finalTheme.typography.titleSize.mobile};
    --hero-title-size-tablet: ${finalTheme.typography.titleSize.tablet};
    --hero-title-size-desktop: ${finalTheme.typography.titleSize.desktop};
    --hero-subtitle-size: ${finalTheme.typography.subtitleSize.mobile};
    --hero-font-family: ${finalTheme.typography.fontFamily};
    --hero-title-weight: ${finalTheme.typography.fontWeight.title};
    --hero-subtitle-weight: ${finalTheme.typography.fontWeight.subtitle};
    --hero-description-weight: ${finalTheme.typography.fontWeight.description};
    --hero-content-padding: ${finalTheme.spacing.padding.mobile};
    --hero-content-padding-md: ${finalTheme.spacing.padding.tablet};
    --hero-content-padding-lg: ${finalTheme.spacing.padding.desktop};
    --hero-transition: ${finalTheme.effects.transition};
    --hero-border-radius: ${finalTheme.effects.borderRadius};
    --hero-box-shadow: ${finalTheme.effects.boxShadow};
    --hero-mobile-breakpoint: ${finalConfig.responsive.breakpoints.mobile}px;
    --hero-tablet-breakpoint: ${finalConfig.responsive.breakpoints.tablet}px;
    --hero-desktop-breakpoint: ${finalConfig.responsive.breakpoints.desktop}px;
  `}
>
  <!-- Background Component -->
  <!-- Debug: backgroundImage value -->
  <script is:inline define:vars={{ bgImage: backgroundImage }}>
    console.log('üîç Hero backgroundImage prop:', bgImage);
    console.log('üîç backgroundImage truthy?', !!bgImage);
    console.log('üîç backgroundImage type:', typeof bgImage);
  </script>

  <!-- Hero Background - Robust Solution -->
  <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1;">
    <!-- Always show gradient background first -->
    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(135deg, #1e40af 0%, #2563eb 50%, #3b82f6 100%); z-index: 1;"></div>

    <!-- Medical pattern overlay -->
    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: radial-gradient(circle at 25% 25%, rgba(255,255,255,0.1) 2px, transparent 2px), radial-gradient(circle at 75% 75%, rgba(255,255,255,0.1) 2px, transparent 2px); background-size: 50px 50px; z-index: 2;"></div>

    <!-- Optional image overlay if available -->
    {backgroundImage && (
      <img
        src={backgroundImage}
        alt="Hospital background"
        style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; opacity: 0.3; z-index: 3;"
        onload="console.log('‚úÖ Hero image loaded as overlay')"
        onerror="console.log('‚ÑπÔ∏è Hero image not available, using gradient background')"
      />
    )}

    <!-- Text readability overlay -->
    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.2); z-index: 4;"></div>
  </div>

  <!-- Content Component -->
  <HeroContent
    title={title}
    subtitle={subtitle}
    description={description}
    ctaButtons={ctaButtons}
    textAlign={textAlign}
  />
</section>

<style>
  .hero {
    position: relative;
    height: var(--hero-height);
    min-height: 500px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    font-family: var(--hero-font-family);
    background: var(--hero-fallback-bg, linear-gradient(135deg, #f3f4f6, #e5e7eb));
  }

  /* Responsive height adjustments */
  @media (max-width: 768px) {
    .hero {
      min-height: 400px;
      height: auto;
      min-height: 100vh;
    }
  }

  @media (min-width: 769px) and (max-width: 1024px) {
    .hero {
      min-height: 600px;
    }
  }

  @media (min-width: 1025px) {
    .hero {
      min-height: 700px;
    }
  }

  /* Accessibility improvements */
  .hero:focus-within {
    outline: 2px solid var(--hero-primary-color);
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .hero {
      border: 2px solid #000000;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .hero * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* Print styles */
  @media print {
    .hero {
      height: auto;
      min-height: auto;
      page-break-inside: avoid;
      background: #ffffff !important;
      color: #000000 !important;
    }
  }

  /* Loading state */
  .hero[data-loading="true"] {
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  .hero[data-loaded="true"] {
    opacity: 1;
  }

  /* Error state */
  .hero[data-error="true"] {
    background: var(--hero-error-bg, #fee2e2);
    color: var(--hero-error-text, #dc2626);
  }
</style>

<script>
  // Hero initialization and interaction handling
  function createHeroController() {
    let isInitialized = false;
    let resizeTimeout: ReturnType<typeof setTimeout> | undefined;

    // Initialize hero functionality
    function init() {
      if (isInitialized) return;

      const heroElement = document.querySelector('[data-hero]') as HTMLElement;
      if (!heroElement) return;

      setupResponsiveHandling(heroElement);
      setupAccessibility(heroElement);
      setupImageLoading(heroElement);

      isInitialized = true;
    }

    // Handle responsive behavior
    function setupResponsiveHandling(heroElement: HTMLElement) {
      function handleResize() {
        if (resizeTimeout) {
          clearTimeout(resizeTimeout);
        }

        resizeTimeout = setTimeout(() => {
          updateResponsiveStyles(heroElement);
        }, 150);
      }

      window.addEventListener('resize', handleResize);
      updateResponsiveStyles(heroElement);
    }

    // Update styles based on viewport
    function updateResponsiveStyles(heroElement: HTMLElement) {
      const width = window.innerWidth;
      const mobileBreakpoint = parseInt(getComputedStyle(heroElement).getPropertyValue('--hero-mobile-breakpoint')) || 768;
      const tabletBreakpoint = parseInt(getComputedStyle(heroElement).getPropertyValue('--hero-tablet-breakpoint')) || 1024;

      if (width < mobileBreakpoint) {
        heroElement.setAttribute('data-breakpoint', 'mobile');
      } else if (width < tabletBreakpoint) {
        heroElement.setAttribute('data-breakpoint', 'tablet');
      } else {
        heroElement.setAttribute('data-breakpoint', 'desktop');
      }
    }

    // Setup accessibility features
    function setupAccessibility(heroElement: HTMLElement) {
      // Handle reduced motion preference
      if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        heroElement.setAttribute('data-reduced-motion', 'true');
      }

      // Handle high contrast preference
      if (window.matchMedia('(prefers-contrast: high)').matches) {
        heroElement.setAttribute('data-high-contrast', 'true');
      }
    }

    // Handle image loading
    function setupImageLoading(heroElement: HTMLElement) {
      const backgroundImage = heroElement.querySelector('[data-hero-image]') as HTMLImageElement;

      if (!backgroundImage) return;

      heroElement.setAttribute('data-loading', 'true');

      backgroundImage.addEventListener('load', () => {
        heroElement.setAttribute('data-loaded', 'true');
        heroElement.removeAttribute('data-loading');
      });

      backgroundImage.addEventListener('error', () => {
        heroElement.setAttribute('data-error', 'true');
        heroElement.removeAttribute('data-loading');
        console.warn('Hero background image failed to load');
      });
    }

    // Cleanup function
    function destroy() {
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }
      isInitialized = false;
    }

    return { init, destroy };
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const heroController = createHeroController();
    heroController.init();

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      heroController.destroy();
    });
  });
</script>
