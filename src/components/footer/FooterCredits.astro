---
// Single Responsibility: Only handles footer credits and copyright
interface Props {
  createdBy?: string;
  year?: number;
  brandName?: string;
  additionalCredits?: string[];
  className?: string;
  showDivider?: boolean;
}

const { 
  createdBy = "Sultan Hasbie",
  year = new Date().getFullYear(),
  brandName = "DiabetesInfo",
  additionalCredits = [],
  className = "",
  showDivider = true
} = Astro.props;
---

<div class={`footer-credits ${className}`} data-footer-credits>
  
  {showDivider && (
    <div class="footer-divider" aria-hidden="true"></div>
  )}
  
  <div class="footer-credits-content">
    
    <!-- Copyright -->
    <div class="footer-copyright">
      <p class="copyright-text">
        © {year} <span class="brand-name">{brandName}</span>. All rights reserved.
      </p>
    </div>

    <!-- Credits -->
    <div class="footer-creator-credits">
      <p class="credits-text">
        Created by <span class="creator-name">{createdBy}</span>
        <span class="creator-icon" aria-hidden="true">✨</span>
      </p>
      
      {additionalCredits.length > 0 && (
        <div class="additional-credits">
          {additionalCredits.map((credit: string) => (
            <p class="additional-credit">{credit}</p>
          ))}
        </div>
      )}
    </div>

  </div>
</div>

<style>
  .footer-credits {
    width: 100%;
    margin-top: auto;
  }

  .footer-divider {
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent 0%,
      var(--footer-divider-color, rgba(255, 255, 255, 0.2)) 20%,
      var(--footer-divider-color, rgba(255, 255, 255, 0.2)) 80%,
      transparent 100%
    );
    margin-bottom: var(--footer-credits-spacing, 1.5rem);
  }

  .footer-credits-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    align-items: center;
    text-align: center;
  }

  /* Copyright */
  .footer-copyright {
    order: 2;
  }

  .copyright-text {
    color: var(--footer-text-muted, rgba(255, 255, 255, 0.6));
    font-size: 0.8rem;
    margin: 0;
    line-height: 1.4;
  }

  .brand-name {
    color: var(--footer-brand-color, #ffffff);
    font-weight: 600;
  }

  /* Creator Credits */
  .footer-creator-credits {
    order: 1;
  }

  .credits-text {
    color: var(--footer-text-light, rgba(255, 255, 255, 0.8));
    font-size: 0.85rem;
    margin: 0;
    line-height: 1.4;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .creator-name {
    color: var(--footer-accent-color, #3b82f6);
    font-weight: 600;
    position: relative;
    transition: color var(--footer-transition, 0.3s ease);
  }

  .creator-name:hover {
    color: var(--footer-accent-hover, #60a5fa);
  }

  .creator-icon {
    font-size: 0.9rem;
    animation: sparkle 2s ease-in-out infinite;
  }

  .additional-credits {
    margin-top: 0.5rem;
  }

  .additional-credit {
    color: var(--footer-text-muted, rgba(255, 255, 255, 0.6));
    font-size: 0.75rem;
    margin: 0.25rem 0;
    line-height: 1.3;
  }

  /* Animations */
  @keyframes sparkle {
    0%, 100% {
      opacity: 0.7;
      transform: scale(1);
    }
    50% {
      opacity: 1;
      transform: scale(1.1);
    }
  }

  /* Responsive Design */
  @media (min-width: 768px) {
    .footer-credits-content {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      text-align: left;
    }

    .footer-copyright {
      order: 1;
    }

    .footer-creator-credits {
      order: 2;
    }

    .credits-text {
      justify-content: flex-end;
    }
  }

  @media (min-width: 1024px) {
    .footer-divider {
      margin-bottom: var(--footer-credits-spacing-lg, 2rem);
    }

    .footer-credits-content {
      gap: 1rem;
    }

    .copyright-text {
      font-size: 0.85rem;
    }

    .credits-text {
      font-size: 0.9rem;
    }
  }

  /* Accessibility */
  .creator-name:focus {
    outline: 2px solid var(--footer-accent-color, #3b82f6);
    outline-offset: 2px;
    border-radius: 3px;
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .copyright-text,
    .credits-text,
    .additional-credit {
      color: #ffffff;
    }

    .footer-divider {
      background: #ffffff;
      height: 2px;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .creator-icon {
      animation: none;
    }

    .creator-name {
      transition: none;
    }
  }

  /* Print styles */
  @media print {
    .footer-credits {
      border-top: 1px solid #000000;
      padding-top: 1rem;
      margin-top: 1rem;
    }

    .footer-divider {
      display: none;
    }

    .copyright-text,
    .credits-text,
    .additional-credit {
      color: #000000 !important;
    }

    .creator-icon {
      display: none;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .footer-credits {
      --footer-text-muted: rgba(255, 255, 255, 0.5);
      --footer-text-light: rgba(255, 255, 255, 0.8);
      --footer-divider-color: rgba(255, 255, 255, 0.15);
    }
  }

  /* Special styling for creator name */
  .creator-name::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 1px;
    background: var(--footer-accent-color, #3b82f6);
    transition: width var(--footer-transition, 0.3s ease);
  }

  .creator-name:hover::after {
    width: 100%;
  }

  /* Subtle glow effect for creator name */
  .creator-name {
    text-shadow: 0 0 8px rgba(59, 130, 246, 0.3);
  }
</style>

<script>
  // Add subtle interaction effects with proper TypeScript types
  function initializeFooterCredits(): void {
    const creatorName = document.querySelector('.creator-name') as HTMLElement | null;

    if (!creatorName) return;

    // Add click effect
    creatorName.addEventListener('click', (e: MouseEvent) => {
      e.preventDefault();

      // Create a small celebration effect
      const icon = document.querySelector('.creator-icon') as HTMLElement | null;
      if (icon) {
        icon.style.animation = 'none';
        setTimeout(() => {
          icon.style.animation = 'sparkle 0.6s ease-in-out';
        }, 10);
      }
    });

    // Add keyboard interaction
    creatorName.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        creatorName.click();
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFooterCredits);
  } else {
    initializeFooterCredits();
  }
</script>
